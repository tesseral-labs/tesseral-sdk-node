/**
 * This file was auto-generated by Fern from our API Definition.
 */

/**
 * Projects are the top-level object in Tesseral.
 *
 *  Everything in Tesseral happens within the context of a Project.
 */
export interface Project {
    /** The Project ID. Starts with `project_...`. */
    id?: string;
    /** A human-friendly name for the Project. */
    displayName?: string;
    /** When the Project was created. */
    createTime?: Date;
    /** When the Project was last modified. */
    updateTime?: Date;
    /** Whether the Project supports "Log in with Google". */
    logInWithGoogle?: boolean;
    /** Whether the Project supports "Log in with Microsoft". */
    logInWithMicrosoft?: boolean;
    /** Whether the Project supports "Log in with email". */
    logInWithEmail?: boolean;
    /** Whether the Project supports "Log in with password". */
    logInWithPassword?: boolean;
    /** Whether the Project supports "Log in with SAML". */
    logInWithSaml?: boolean;
    /** Whether the Project supports authenticator apps as a secondary auth factor. */
    logInWithAuthenticatorApp?: boolean;
    /** Whether the Project supports passkeys as a secondary auth factor. */
    logInWithPasskey?: boolean;
    /** The OAuth Client ID to use for "Log in with Google". */
    googleOauthClientId?: string;
    /**
     * The OAuth Client Secret to use for "Log in with Google".
     *
     *  This field is write-only.
     */
    googleOauthClientSecret?: string;
    /** The OAuth Client ID to use for "Log in with Microsoft". */
    microsoftOauthClientId?: string;
    /**
     * The OAuth Client Secret to use for "Log in with Microsoft".
     *
     *  This field is write-only.
     */
    microsoftOauthClientSecret?: string;
    /** The domain where the Project's Vault lives. */
    vaultDomain?: string;
    /** Whether vault_domain is different from the automatically-assigned one. */
    vaultDomainCustom?: boolean;
    /**
     * The set of domains the Project trusts.
     *
     *  Client-side JavaScript on these domains can take actions on behalf of
     *  logged-in Users.
     */
    trustedDomains?: string[];
    /** The domain that authentication cookies are stored on. */
    cookieDomain?: string;
    /** Where Users are redirected after returning from the Vault. */
    redirectUri?: string;
    /** Where Users are redirected after logging in. */
    afterLoginRedirectUri?: string;
    /** Where Users are redirected after signing up. */
    afterSignupRedirectUri?: string;
    /** Emails sent to Users come from this domain. */
    emailSendFromDomain?: string;
}
